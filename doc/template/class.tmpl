<!DOCTYPE html>
<html lang="en">
	<head>
		<title>{+ data.alias +}</title>
		<script src="http://github.com/cho45/jshighlight/raw/master/jshighlight.js"></script>
		<meta http-equiv="content-type" content="text/html; charset={+IO.encoding+}" />
		<link rel="stylesheet" type="text/css" href="http://github.com/cho45/jshighlight/raw/master/style.css"/>
		<link rel="stylesheet" type="text/css" href="template/doc.css"/>
	</head>
	<body>
		<header>
			<h1>Object {+ data.alias +}</h1>
			<dl>
				<if test="data.version">
				<dt>Version</dt>
				<dd>{+ data.version +}</dd>
				</if>
			</dl>

			<table>
				<caption>Constructor</caption>
				<thead>
					<tr>
						<th scope="col">Constructor Attributes</th>
						<th scope="col">Constructor Name and Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td class="attr">{!
							if (data.isPrivate) output += "&lt;private&gt; ";
							if (data.isInner) output += "&lt;inner&gt; ";
						!}&nbsp;</td>
						<td class="description">
							<a href="{+ href(data.alias) +}">{+ escapeHTML(data.alias) +}</a>{+ makeSignature(data.params) +}
						</td>
					</tr>
				</tbody>
			</table>

		<if test="data.properties.length">
			{! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}); !}
			<if test="ownProperties.length">
			<table>
				<caption>Value Properties</caption>
				<thead>
					<tr>
						<th scope="col">Value Attributes</th>
						<th scope="col">Value Name and Description</th>
					</tr>
				</thead>
				<tbody>
				<for each="member" in="ownProperties">
					<tr>
						<td class="attr">{!
							if (member.isPrivate) output += "&lt;private&gt; ";
							if (member.isInner) output += "&lt;inner&gt; ";
							if (member.isStatic) output += "&lt;static&gt; ";
							if (member.isConstant) output += "&lt;constant&gt; ";
						!}&nbsp;</td>
						<td class="description">
							<if test="member.isStatic && member.memberOf != '_global_'">{+ member.memberOf +}.</if><a href="{+ href(member.alias) +}">{+ escapeHTML(member.name) +}</a>
						</td>
					</tr>
				</for>
				</tbody>
			</table>
			</if>
		</if>

		<if test="data.methods.length">
			{! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}); !}
			<if test="ownMethods.length">
			<table>
				<caption>Method Properties</caption>
				<thead>
					<tr>
						<th scope="col">Method Attributes</th>
						<th scope="col">Method Name and Description</th>
					</tr>
				</thead>
				<tbody>
				<for each="member" in="ownMethods">
					<tr>
						<td class="attr">{!
							if (member.isPrivate) output += "&lt;private&gt; ";
							if (member.isInner) output += "&lt;inner&gt; ";
							if (member.isStatic) output += "&lt;static&gt; ";
						!}&nbsp;</td>
						<td class="description">
							{+member.memberOf+}{+ member.isStatic? '.' : '#' +}<a href="{+ href(member.alias) +}">{+ member.name.replace(/\^\d+$/, '') +}</a>{+ makeSignature(member.params) +}
							<if test="member.type"><span class="type">//=> {+ escapeHTML(member.type) +}</span></if>
						</td>
					</tr>
				</for>
				</tbody>
			</table>
			</if>
		</if>
		</header>


		<section>
			<h1>Constructor</h1>
			{! member = data !}

			<section id="{+ idOf(member.alias) +}" class="value">

			<h1>
				<span class="attr">
				{!
					if (member.isPrivate) output += "&lt;private&gt; ";
					if (member.isInner) output += "&lt;inner&gt; ";
				!}
				</span>

				<span class="name">{+member.name.replace(/\^\d+$/, '')+}</span
				><span class="signature">{+makeSignature(member.params)+}</span>

				<if test="member.type"><span class="type">//=> {+ escapeHTML(member.type) +}</span></if>
			</h1>

			<header>
				<if test="member.params.length">
					<section>
						<h1>Parameters</h1>
						<dl>
						<for each="item" in="member.params">
							<dt>
							<span class="name">{+item.name+}</span>
							<span class="type"><if test="item.type"> : {+ escapeHTML(item.type) +}</if></span>
							<span class="option">
								<if test="item.isOptional">(optional<if test="item.defaultValue">, default: {+item.defaultValue+}</if>)</if>
							</span>
							</dt>
							<dd>{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</section>
				</if>

				<if test="member.deprecated">
					<section>
						<h1>Deprecated</h1>
						{+ resolveLinks(member.deprecated) +}
					</section>
				</if>
				<if test="member.since">
					<section>
						<h1>Since</h1>
						{+ member.since +}
					</section>
				</if>

				<if test="member.exceptions.length">
					<section>
						<h1>Throws</h1>
						<dl>
						<for each="item" in="member.exceptions">
							<dt>
								<span class="type"><if test="item.type">{+ escapeHTML(item.type) +}</if></span>
								<span class="name">{+ item.name +}</span>
							</dt>
							<dd>{+ resolveLinks(item.desc) +}</dd>
						</for>
						</dl>
					</section>
				</if>
			</header>

			<section class="description">
				{+resolveLinks(member.desc)+}
			</section>

			<if test="member.example.length"><for each="example" in="member.example">
			<pre class="code">{+example+}</pre>
			</for></if>

			<footer>
			<if test="member.see.length">
				<section>
					<h1>See</h1>
					<ul>
						<for each="item" in="member.see">
						<li><a href="#{+ encodeURIComponent(item) +}">{+ item +}</a></li>
						</for>
					</ul>
				</section>
			</if>
			</footer>

			</section>
		</section>

		<if test="defined(ownProperties) && ownProperties.length">
		<section>
			<h1>Value Properties</h1>

			<for each="member" in="ownProperties">
			<section id="{+ idOf(member.alias) +}" class="value">
				<h1>
					<span class="attr">
					{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
						if (member.isConstant) output += "&lt;constant&gt; ";
					!}
					</span>

					<span class="memberOf">{+member.memberOf+}{+ (member.isStatic ? '.' : '#') +}</span
					><span class="name">{+member.name.replace(/\^\d+$/, '')+}</span
					>

					<if test="member.type"><span class="type">//=> {+ escapeHTML(member.type) +}</span></if>
				</h1>

				<header>
					<if test="member.params.length">
						<section>
							<h1>Parameters</h1>
							<dl>
							<for each="item" in="member.params">
								<dt>
								<span class="name">{+item.name+}</span>
								<span class="type"><if test="item.type"> : {+ escapeHTML(item.type) +}</if></span>
								<span class="option">
									<if test="item.isOptional">(optional<if test="item.defaultValue">, default: {+item.defaultValue+}</if>)</if>
								</span>
								</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</section>
					</if>

					<if test="member.deprecated">
						<section>
							<h1>Deprecated</h1>
							{+ resolveLinks(member.deprecated) +}
						</section>
					</if>
					<if test="member.since">
						<section>
							<h1>Since</h1>
							{+ member.since +}
						</section>
					</if>

					<if test="member.exceptions.length">
						<section>
							<h1>Throws</h1>
							<dl>
							<for each="item" in="member.exceptions">
								<dt>
									<span class="type"><if test="item.type">{+ escapeHTML(item.type) +}</if></span>
									<span class="name">{+ item.name +}</span>
								</dt>
								<dd>{+ resolveLinks(item.desc) +}</dd>
							</for>
							</dl>
						</section>
					</if>

					<if test="member.returns.length">
						<section>
							<h1>Returns</h1>
							<for each="item" in="member.returns">
							<span class="type"><if test="item.type">{+ escapeHTML(item.type) +}</if></span>
							<span class="name">{+item.name+}</span>
							<span class="desc">{+resolveLinks(item.desc)+}</span>
							</for>
						</section>
					</if>
				</header>

				<section class="description">
					{+resolveLinks(member.desc)+}
				</section>

				<if test="member.example.length"><for each="example" in="member.example">
				<pre class="code">{+example+}</pre>
				</for></if>


				<footer>
				<if test="member.see.length">
					<section>
						<h1>See</h1>
						<ul>
							<for each="item" in="member.see">
							<li><a href="#{+ encodeURIComponent(item) +}">{+ item +}</a></li>
							</for>
						</ul>
					</section>
				</if>
				</footer>
			</section>
			</for>
		</if>

		<if test="defined(ownMethods) && ownMethods.length">
		<section>
			<h1>Method Properties</h1>

			<for each="member" in="ownMethods">
			<section id="{+ idOf(member.alias) +}" class="method">
				<h1>
					<span class="attr">
					{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
					!}
					</span>

					<span class="memberOf">{+member.memberOf+}{+ (member.isStatic ? '.' : '#') +}</span
					><span class="name">{+member.name.replace(/\^\d+$/, '')+}</span
					><span class="signature">{+makeSignature(member.params)+}</span>

					<if test="member.type"><span class="type">//=> {+ escapeHTML(member.type) +}</span></if>
				</h1>

				<header>
					<if test="member.params.length">
						<section>
							<h1>Parameters</h1>
							<dl>
							<for each="item" in="member.params">
								<dt>
								<span class="name">{+item.name+}</span>
								<span class="type"><if test="item.type"> : {+ escapeHTML(item.type) +}</if></span>
								<span class="option">
									<if test="item.isOptional">(optional<if test="item.defaultValue">, default: {+item.defaultValue+}</if>)</if>
								</span>
								</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</section>
					</if>

					<if test="member.deprecated">
						<section>
							<h1>Deprecated</h1>
							{+ resolveLinks(member.deprecated) +}
						</section>
					</if>
					<if test="member.since">
						<section>
							<h1>Since</h1>
							{+ member.since +}
						</section>
					</if>

					<if test="member.exceptions.length">
						<section>
							<h1>Throws</h1>
							<dl>
							<for each="item" in="member.exceptions">
								<dt>
									<span class="type"><if test="item.type">{+ escapeHTML(item.type) +}</if></span>
									<span class="name">{+ item.name +}</span>
								</dt>
								<dd>{+ resolveLinks(item.desc) +}</dd>
							</for>
							</dl>
						</section>
					</if>

					<if test="member.returns.length">
						<section class="return">
							<h1>Returns</h1>
							<for each="item" in="member.returns">
							<span class="type"><if test="item.type">{+ escapeHTML(item.type) +}</if></span>
							<span class="desc">{+resolveLinks(item.desc)+}</span>
							</for>
						</section>
					</if>
				</header>

				<section class="description">
					{+resolveLinks(member.desc)+}
				</section>

				<if test="member.example.length"><for each="example" in="member.example">
				<pre class="code">{+example+}</pre>
				</for></if>


				<footer>
				<if test="member.see.length">
					<section>
						<h1>See</h1>
						<ul>
							<for each="item" in="member.see">
							<li><a href="#{+ encodeURIComponent(item) +}">{+ item +}</a></li>
							</for>
						</ul>
					</section>
				</if>
				</footer>
			</section>
			</for>
		</section>
		</if>
	</body>
</html>

